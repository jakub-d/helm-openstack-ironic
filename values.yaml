ironicServerName: DEFINE-SERVER-NAME.IO-OR-EXTERNAL-IP

## Ironic container image used for all Ironic components
##
image:
  name: jakubdlu/centos-openstack-ironic
  version: train-0.2.0
  pullPolicy: IfNotPresent

## Existing persistent volume claim
## make sure the pvc can be cross mounted between the containers
# persistentVolumeClaimName: DEFINE-EXISTING-PV-CLAIM

## /etc/ironic/policy.json contents
##
policy_json: ""

## _Some_ of the /etc/ironic/ironic.conf
## configuration options.
## If you need more, please extract and create PR.
##
config:
  DEFAULT:
    debug: false
    enabled_hardware_types: ipmi
    enabled_network_interfaces: noop
  keystone_authtoken: {}
  api:
    api_workers: 8
  conductor:
    heartbeat_interval: 10
    heartbeat_timeout: 30
    deploy_callback_timeout: 1800
    power_state_sync_max_retries: 3
    automated_clean: false
    clean_callback_timeout: 1800
  database: {}
  deploy:
    enable_ata_secure_erase: false
    erase_devices_priority: 0
    erase_devices_metadata_priority: 0
    power_off_after_deploy_failure: false
    http_root: /storage/httpboot
  dhcp:
    dhcp_provider: none
  pxe:
    images_path: /storage/httpboot/images
    instance_master_path: /storage/httpboot/master-path
    tftp_root: /storage/tftpboot
    tftp_master_path: /storage/tftpboot/master-path
    pxe_append_params: "console=tty0 console=ttyS0,115200 coreos.autologin=tty0"
    ipxe_boot_script: $pybasedir/drivers/modules/boot.ipxe
    ## to enable/disable ipxe, replace values of both following keys
    ipxe_enabled: false
    pxe_config_template: $pybasedir/drivers/modules/pxe_config.template
    # ipxe_enabled: true
    # pxe_config_template: $pybasedir/drivers/modules/ipxe_config.template

api:
  ## Ironic API container name
  ##
  name: api

  ## Ironic API scaling settings
  ##
  replicas: 1

  ## Ironic API ports
  ##
  portInternal: 8080
  portExternal: 6387

  ingress:
    enabled: false
    annotations: {}
    #  kubernetes.io/ingress.class: nginx
    #  kubernetes.io/tls-acme: "true"
    paths: []
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # K8S service types
  # For service type ClusterIP define externalIPs
  service_type: ClusterIP
  # externalIPs:
  #   - DEFINE-IP-HERE

  # For service type LoadBalancer define loadBalancerIP
  # service_type: LoadBalancer
  # loadBalancerIP: DEFINE-IP-HERE

  # Optional service annotations
  # service_annotations:
  #   metallb.universe.tf/allow-shared-ip: sharing key

  ## Ironic API resources
  ##
  resources:
    requests:
      memory: "8G"
      cpu: "8"
    limits:
      memory: "8G"
      cpu: "8"

keystone:
  enabled: false
  ## Keystone container name
  ##
  name: keystone

  default_region: ironic

  ## Keystone scaling settings
  ##
  replicas: 1

  ## Ironic API ports
  ##
  portInternal: 5000
  portExternal: 5000

  ingress:
    enabled: false
    annotations: {}
    #  kubernetes.io/ingress.class: nginx
    #  kubernetes.io/tls-acme: "true"
    paths: []
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # K8S service types
  # For service type ClusterIP define externalIPs
  service_type: ClusterIP
  # externalIPs:
  #   - DEFINE-IP-HERE

  # For service type LoadBalancer define loadBalancerIP
  # service_type: LoadBalancer
  # loadBalancerIP: DEFINE-IP-HERE

  # Optional service annotations
  # service_annotations:
  #   metallb.universe.tf/allow-shared-ip: sharing key

  ## Ironic API resources
  ##
  resources:
    requests:
      memory: "128Mi"
      cpu: "200m"
    limits:
      memory: "256Mi"
      cpu: "1"


httpboot:
  ## Ironic www name
  ##
  name: httpboot

  ## Ironic www scaling
  ##
  replicas: 1

  portInternal: 80
  portExternal: 80

  ingress:
    enabled: false
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
    #  kubernetes.io/ingress.class: nginx
    #  kubernetes.io/tls-acme: "true"
    paths: []
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # K8S service types
  # For service type ClusterIP define externalIPs
  service_type: ClusterIP
  # externalIPs:
  #   - DEFINE-IP-HERE

  # For service type LoadBalancer define loadBalancerIP
  # service_type: LoadBalancer
  # loadBalancerIP: DEFINE-IP-HERE

  # Optional service annotations
  # service_annotations:
  #   metallb.universe.tf/allow-shared-ip: sharing key

  ## Ironic www container image info
  ##
  image:
    name: nginx
    version: 1.13.5-alpine
    pullPolicy: IfNotPresent

  ## Ironic www resources
  ##
  resources:
    requests:
      memory: "2G"
      cpu: "2"
    limits:
      memory: "4G"
      cpu: "4"

mgmt:
  ## Ironic management pod name
  ##
  name: mgmt

  ## Ironic management pod scaling
  ##
  replicas: 1

  ## POD Startup Command
  ##
  pod_command: /usr/bin/sleep
  pod_args: infinity

  ## POD Environment variables
  ##
  extra_env:
  - name: HISTFILE
    value: /mnt/mgmt-scripts/.bash_history

tftp:
  enabled: true

  ## Ironic tftp name
  ##
  name: tftp

  ## Ironic tftp network configuration
  ##
  # Note that tftp traffic is not managed by k8s
  # tfp daemons run on all worker node with hostNetwork=true
  # You can select either an ip of one of your k8s worker nodes,
  # or use a floating ip managed by metallb/keepalived
  public_ip: DEFINE-IP-HERE

  persistence:
    enabled: true
    accessMode: ReadWriteMany
    size: 8Gi
    annotations: {}
  ## make sure the resulted pvc can be cross mounted between the containers
  #  storageClass: "default"

  ## Ironic tftp resources
  ##
  resources:
    requests:
      memory: "2G"
      cpu: "2"
    limits:
      memory: "4G"
      cpu: "4"

  nodeSelector: {}

conductor:
  ## Ironic Conductor name
  ##
  name: conductor

  ## Ironic Conductor scaling
  ##
  replicas: 1

  ## Conductor can be run in privileged mode for iscsi deployment interface
  ##
  privileged: false
  hostNetwork: false

  ## Ironic Conductor resources
  ##
  resources:
    requests:
      memory: "8G"
      cpu: "8"
    limits:
      memory: "8G"
      cpu: "8"

mariadb:
  enabled: true
  db:
    user: ironic
#   password: DEFINE-THIS-SECRET
    name: ironic
#  rootUser.password: DEFINE-THIS-SECRET
  slave:
    replicas: 0
  master:
    persistence:
      enabled: true
      subPath: mariadb
   #  existingClaim: DEFINE-EXISTING-PV-CLAIM
    config: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      default-storage-engine = innodb
      innodb_file_per_table = on
      max_connections = 4096

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

  resources:
    requests:
      memory: 256Mi
      cpu: 100m

rabbitmq:
  enabled: true
  replicas: 1
  rabbitmq:
    username: rabbitmq
#    password: DEFINE-THIS-SECRET
#    erlangCookie: DEFINE-THIS-SECRET
  image:
    pullPolicy: IfNotPresent
  persistence:
    enabled: false
